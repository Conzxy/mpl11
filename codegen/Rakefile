require 'erb'
require 'tempfile'


module Enumerable
  def foldr(state, &block)
    reverse.inject(state) { |state, x| block.call(x, state) }
  end

  alias_method(:foldl, :inject)
end

def comma(xs)
  xs.map(&", ".method(:+))
end

def typename(xs)
  xs.map(&"typename ".method(:+))
end

def apply
  -> (f, *args) {
    "typename #{f}::type::template apply<#{args.join(', ')}>"
  }
end


task :default => [:all]
task :all

Dir['boost/**/*.erb.*'].each do |header_erb|
  header_hpp = header_erb.sub(/\.erb/, '')

  task :all => ["../include/#{header_hpp}"]
  file "../include/#{header_hpp}" => [header_erb] do
    erb = ERB.new(File.read(header_erb), nil, '-')
    erb.filename = header_erb

    File.open("../include/#{header_hpp}", 'w') do |io|
      io.write(erb.result)
    end
  end
end

task :all => [:minify]
desc "Preprocess the master header of the library with Wave and create "\
     "a minified version of it."
task :minify do
  wave = './wave --c++11 -S ../include --line 0'
  body = `#{wave} ../include/boost/mpl11.hpp`.gsub("\n", ' ').squeeze(' ').strip
  minified = <<-EOS
/*
#{File.read('../LICENSE.md')}
*/
#ifndef BOOST_MPL11_MIN_HPP
#define BOOST_MPL11_MIN_HPP
#{body}
#endif
EOS

  IO.write('../include/boost/mpl11.min.hpp', minified)
end
